---
title: Anti ChatGPT PRO (PTITCTF)
published: 2025-09-21
description: ""
image: ""
tags: ["Reverse Engineering", "Shellcode"]
category: "Malware Analysis"
draft: false
lang: "VI"
---
# Anti ChatGPT PRO (PTITCTF)
>Anti ChatGPT Pro ‚≠êÔ∏èüß†
500
hard reverse noGPT
 0 (0% liked)  1
Ch√†o m·ª´ng tr·ªü l·∫°i, Nh√† th√°m hi·ªÉm.
B·∫°n ƒë√£ v∆∞·ª£t qua m√™ cung, nh∆∞ng ph√≠a tr∆∞·ªõc kh√¥ng ph·∫£i l√† l·ªëi tho√°t, m√† l√† m·ªôt cƒÉn ph√≤ng ph·ªß k√≠n g∆∞∆°ng.
M·ªçi th·ª© b·∫°n th·∫•y ƒë·ªÅu l√† ph·∫£n chi·∫øu ‚Äì n·ª≠a th·∫≠t, n·ª≠a gi·∫£, tr·ªôn l·∫´n trong tr√≤ ch∆°i c·ªßa ·∫£o gi√°c.
Nh·ªØng manh m·ªëi c√≥ th·ªÉ xu·∫•t hi·ªán ·ªü kh·∫Øp n∆°i, nh∆∞ng c≈©ng c√≥ th·ªÉ ch·ªâ l√† b·∫´y ƒë·ªÉ ƒë√°nh l·ª´a tr·ª±c gi√°c c·ªßa b·∫°n.
·ªû ƒë√¢y, kh√¥ng ch·ªâ ƒë√¥i m·∫Øt b·ªã th·ª≠ th√°ch, m√† c·∫£ ni·ªÅm tin v√†o l√Ω tr√≠ c·ªßa ch√≠nh b·∫°n.
B·∫°n c√≥ d√°m ph√° v·ª° nh·ªØng chi·∫øc g∆∞∆°ng ƒë·ªÉ t√¨m ra s·ª± th·∫≠t, hay s·∫Ω b·ªã giam c·∫ßm trong m√™ cung c·ªßa ·∫£o ·∫£nh?
pass: ptitctf2025


B·∫Øt ƒë·∫ßu v·ªõi m·ªôt m√¥ t·∫£ kh√° chill chill :))
## Start
T·∫°i entry (H√†m start) C√≥ g·ªçi m·ªôt s·ªë h√†m l·∫° 
![image](https://hackmd.io/_uploads/HkvkfCAigx.png)
![image](https://hackmd.io/_uploads/r1LaW0Asex.png)

Ta th·∫•y logic kh√° ƒë∆°n gi·∫£n:
- M·ªü socket v·ªõi IP **127.0.0.1:1337** Send g·ª≠i data ƒëi
- Check Flag (nh·∫≠n data g·ª≠i v·ªÅ v√† ki·ªÉm tra n·∫øu chu·ªói l√† "True" th√¨ print ra Amazing good job ng∆∞·ª£c l·∫°i print ra "Wrong")
## Sub_1400248E0 (h√†m kh·ªüi t·∫°o)
Sau khi check c√°c h√†m c√≥ m·ªôt s·ªë h√†m b·ªã l·ªói stack frame too long khi·∫øn IDA kh√¥ng th·ªÉ compiled ƒë∆∞·ª£c nh∆∞ng ·ªü h√†m **sub_1400248E0** d∆∞∆°ng nh∆∞ l√† m·ªôt h√†m kh·ªüi t·∫°o cho runtime ch·ª©a:
![image](https://hackmd.io/_uploads/r1sSXRRjxe.png)
**&unk_14002F030** tr·ªè t·ªõi duy nh·∫•t m·ªôt offset 
![image](https://hackmd.io/_uploads/BJ_F70Rolx.png)
![image](https://hackmd.io/_uploads/rJQnmCAogl.png)
![image](https://hackmd.io/_uploads/SknmcARjel.png)

**&unk_14002F030 -> sub_140001900 ->  sub_140001740** H√†m n√†y ƒë√°ng ch√∫ √Ω v√¨ n·∫±m ngo√†i lu·ªìng logic ki·ªÉm tra flag, ƒë·ªìng th·ªùi ch·ª©a nhi·ªÅu ƒëo·∫°n m√£ b·∫•t th∆∞·ªùng.
> Note : Ban ƒë·∫ßu m√¨nh ƒë√£ reverse tr∆∞·ªõc v√† rename l·∫°i t√™n h√†m 
## Xor_DEADBEEF
H√†m **xor_DEADBEEF** l√† m·ªôt h√†m xor v·ªõi key hardcode l√† **b"\xDE\xAD\xBE\xEF"**
```
unsigned __int64 __fastcall sub_140023FA0(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  unsigned __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-28h]
  _BYTE v5[4]; // [rsp+Ch] [rbp-1Ch]
  __int64 v6; // [rsp+10h] [rbp-18h]
  unsigned __int64 v7; // [rsp+18h] [rbp-10h]
  __int64 v8; // [rsp+20h] [rbp-8h]

  v8 = a1;
  v7 = a2;
  v6 = a3;
  v5[0] = 0xDE;
  v5[1] = 0xAD;
  v5[2] = 0xBE;
  v5[3] = 0xEF;
  for ( i = 0LL; ; ++i )
  {
    result = i;
    if ( i >= v7 )
      break;
    *(_BYTE *)(v6 + i) = v5[i & 3] ^ *(_BYTE *)(v8 + i);
  }
  return result;
}
```
Ti·∫øn h√†nh gi·∫£i m√£ chu·ªói bytes b·∫±ng h√†m **Xor_DEADBEEF**
![image](https://hackmd.io/_uploads/HJPoPAAoxl.png)
Theo t√†i li·ªáu [Microsoft](https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/beginthread-beginthreadex?view=msvc-170), API _beginthreadex ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o m·ªôt thread m·ªõi t·∫°i m·ªôt routine th·ª±c thi, v√† trong tr∆∞·ªùng h·ª£p n√†y h√†m GetProcAddress ƒë∆∞·ª£c d√πng ƒë·ªÉ l·∫•y ƒë·ªãa ch·ªâ t·ª´ msvcrt.dll.
H√†m sub_140024100 ƒë√≥ng vai tr√≤ l√† start address ƒë∆∞·ª£c truy·ªÅn v√†o _beginthreadex.

## sub_140024100
Qua ph√¢n t√≠ch, c√≥ th·ªÉ th·∫•y h√†m sub_140024100 th·ª±c ch·∫•t ho·∫°t ƒë·ªông nh∆∞ m·ªôt shellcode loader.
```
__int64 __fastcall sub_140024100(__int64 a1)
{
  _CONTEXT Context; // [rsp+50h] [rbp-798h] BYREF
  HANDLE hThread; // [rsp+528h] [rbp-2C0h]
  DWORD dwThreadId; // [rsp+530h] [rbp-2B8h]
  DWORD dwProcessId; // [rsp+534h] [rbp-2B4h]
  char v6[8]; // [rsp+538h] [rbp-2B0h] BYREF
  unsigned __int64 v7; // [rsp+540h] [rbp-2A8h] BYREF
  LPCVOID lpBuffer; // [rsp+548h] [rbp-2A0h]
  LPVOID lpBaseAddress; // [rsp+550h] [rbp-298h]
  __int64 v10; // [rsp+558h] [rbp-290h]
  unsigned int v11; // [rsp+560h] [rbp-288h]
  _BYTE ResumeThread[13]; // [rsp+566h] [rbp-282h] BYREF
  unsigned __int64 v13; // [rsp+573h] [rbp-275h] BYREF
  int v14; // [rsp+57Bh] [rbp-26Dh]
  char v15; // [rsp+57Fh] [rbp-269h]
  __int64 v16; // [rsp+580h] [rbp-268h]
  unsigned int v17; // [rsp+58Ch] [rbp-25Ch]
  _BYTE SetThreadContentA[32]; // [rsp+590h] [rbp-258h] BYREF
  _QWORD v19[2]; // [rsp+5B0h] [rbp-238h] BYREF
  char v20; // [rsp+5C0h] [rbp-228h]
  __int64 v21; // [rsp+5D0h] [rbp-218h]
  unsigned int v22; // [rsp+5DCh] [rbp-20Ch]
  _BYTE GetThreadContentA[32]; // [rsp+5E0h] [rbp-208h] BYREF
  _QWORD v24[2]; // [rsp+600h] [rbp-1E8h] BYREF
  char v25; // [rsp+610h] [rbp-1D8h]
  __int64 v26; // [rsp+618h] [rbp-1D0h]
  unsigned int v27; // [rsp+624h] [rbp-1C4h]
  _BYTE OpenThread[11]; // [rsp+62Ah] [rbp-1BEh] BYREF
  unsigned __int64 v29; // [rsp+635h] [rbp-1B3h] BYREF
  __int16 v30; // [rsp+63Dh] [rbp-1ABh]
  char v31; // [rsp+63Fh] [rbp-1A9h]
  __int64 v32; // [rsp+640h] [rbp-1A8h]
  unsigned int v33; // [rsp+64Ch] [rbp-19Ch]
  _BYTE WriteProcessMemory[32]; // [rsp+650h] [rbp-198h] BYREF
  _QWORD v35[2]; // [rsp+670h] [rbp-178h] BYREF
  __int16 v36; // [rsp+680h] [rbp-168h]
  char v37; // [rsp+682h] [rbp-166h]
  __int64 v38; // [rsp+688h] [rbp-160h]
  unsigned int v39; // [rsp+694h] [rbp-154h]
  _BYTE VirtualAlloc[15]; // [rsp+69Ah] [rbp-14Eh] BYREF
  unsigned __int64 v41; // [rsp+6A9h] [rbp-13Fh] BYREF
  int v42; // [rsp+6B1h] [rbp-137h]
  __int16 v43; // [rsp+6B5h] [rbp-133h]
  char v44; // [rsp+6B7h] [rbp-131h]
  __int64 v45; // [rsp+6B8h] [rbp-130h]
  unsigned int v46; // [rsp+6C4h] [rbp-124h]
  _BYTE CreateProcessA[15]; // [rsp+6CAh] [rbp-11Eh] BYREF
  unsigned __int64 v48; // [rsp+6D9h] [rbp-10Fh] BYREF
  int v49; // [rsp+6E1h] [rbp-107h]
  __int16 v50; // [rsp+6E5h] [rbp-103h]
  char v51; // [rsp+6E7h] [rbp-101h]
  __int64 v52; // [rsp+6E8h] [rbp-100h]
  unsigned int v53; // [rsp+6F0h] [rbp-F8h]
  _BYTE kernel32[13]; // [rsp+6F6h] [rbp-F2h] BYREF
  unsigned __int64 v55; // [rsp+703h] [rbp-E5h] BYREF
  int v56; // [rsp+70Bh] [rbp-DDh]
  char v57; // [rsp+70Fh] [rbp-D9h]
  CHAR CommandLine[32]; // [rsp+710h] [rbp-D8h] BYREF
  _QWORD v59[5]; // [rsp+730h] [rbp-B8h] BYREF
  struct _PROCESS_INFORMATION ProcessInformation; // [rsp+758h] [rbp-90h] BYREF
  struct _STARTUPINFOA StartupInfo; // [rsp+770h] [rbp-78h] BYREF
  __int64 v62; // [rsp+7D8h] [rbp-10h]
  unsigned int v63; // [rsp+7E4h] [rbp-4h]

  v62 = a1;
  memset(&StartupInfo, 0, sizeof(StartupInfo));
  StartupInfo.cb = 104;
  memset(&ProcessInformation, 0, sizeof(ProcessInformation));
  v59[0] = 0x80DAC3B7B8E2979DuLL;
  v59[1] = 0x8ACADEA7BCE2DEA9uLL;
  v59[2] = 0x87DDDBADB38C9EB3uLL;
  v59[3] = 0xEFDBD5BBC1CADEB1uLL;
  xor_DEADBEEF((__int64)v59, 0x20uLL, (__int64)CommandLine);// C:\Windows\System32\svchost.exe
  v55 = 0xDD8DC1BB81CCC8B5uLL;
  v56 = 0x83D2C9F0;
  v57 = 0xDE;
  xor_DEADBEEF((__int64)&v55, 0xDuLL, (__int64)kernel32);// kernel32
  v53 = hash(kernel32);
  v52 = PEB_ldr(v53);
  v48 = 0x9DEEC8AA8EDBDF9DuLL;
  v49 = 0x9CDBCEB1;
  v50 = 0xECAD;
  v51 = 0xBE;
  xor_DEADBEEF((__int64)&v48, 0xFuLL, (__int64)CreateProcessA);// CreateProcess
  v46 = hash(CreateProcessA);
  v45 = parser_returnAddrAPI(v52, v46);
  v41 = 0xAED2CCAB9BCCC488uLL;
  v42 = 0x8CD1C1B2;
  v43 = 0xD59B;
  v44 = 0xBE;
  xor_DEADBEEF((__int64)&v41, 0xFuLL, (__int64)VirtualAlloc);// VirtualAlloc
  v39 = hash(VirtualAlloc);
  v38 = parser_returnAddrAPI(v52, v39);
  v35[0] = 0x80CCFDBB9BD7DF89uLL;
  v35[1] = 0x80D3C8939CCDC8BDuLL;
  v36 = -11092;
  v37 = -66;
  xor_DEADBEEF((__int64)v35, 0x13uLL, (__int64)WriteProcessMemory);// WriteProcessMemory
  v33 = hash(WriteProcessMemory);
  v32 = parser_returnAddrAPI(v52, v33);
  v29 = 0x8ACCC58A81DBDD91uLL;
  v30 = 0xC9BF;
  v31 = 0xBE;
  xor_DEADBEEF((__int64)&v29, 0xBuLL, (__int64)OpenThread);// OpenThread
  v27 = hash(OpenThread);
  v26 = parser_returnAddrAPI(v52, v27);
  v24[0] = 0x8EDBDFB6BBCAC899uLL;
  v24[1] = 0x9BC6C8AA81D1EEBAuLL;
  v25 = -34;
  xor_DEADBEEF((__int64)v24, 0x11uLL, (__int64)GetThreadContentA);// GetThreadContentA
  v22 = hash(GetThreadContentA);
  v21 = parser_returnAddrAPI(v52, v22);
  v19[0] = 0x8EDBDFB6BBCAC88DuLL;
  v19[1] = 0x9BC6C8AA81D1EEBAuLL;
  v20 = -34;
  xor_DEADBEEF((__int64)v19, 0x11uLL, (__int64)SetThreadContentA);// SetThreadContentA
  v17 = hash(SetThreadContentA);
  v16 = parser_returnAddrAPI(v52, v17);
  v13 = 0x87EAC8B39ACDC88CuLL;
  v14 = 0x8BDFC8AC;
  v15 = 0xDE;
  xor_DEADBEEF((__int64)&v13, 0xDuLL, (__int64)ResumeThread);// ResumeThread
  v11 = hash(ResumeThread);
  v10 = parser_returnAddrAPI(v52, v11);
  if ( ::CreateProcessA(0LL, CommandLine, 0LL, 0LL, 1, 4u, 0LL, 0LL, &StartupInfo, &ProcessInformation) )
  {
    lpBaseAddress = VirtualAllocEx(ProcessInformation.hProcess, 0LL, (unsigned int)Size, 0x3000u, 0x40u);
    lpBuffer = malloc((unsigned int)Size);
    if ( lpBuffer )
    {
      memcpy((void *)lpBuffer, byte_140030FB0, (unsigned int)Size);
      v7 = 0xEFEAFD99BBFFE59DuLL;
      xor_DEADBEEF((__int64)&v7, 8uLL, (__int64)v6);
      xor((__int64)lpBuffer, Size, v6);
      ::WriteProcessMemory(ProcessInformation.hProcess, lpBaseAddress, lpBuffer, (unsigned int)Size, 0LL);
      free((void *)lpBuffer);
    }
    dwProcessId = ProcessInformation.dwProcessId;
    dwThreadId = sub_140001910(ProcessInformation.dwProcessId);
    hThread = ::OpenThread(0x1FFFFFu, 0, dwThreadId);
    memset(&Context, 0, sizeof(Context));
    Context.ContextFlags = 1048587;
    GetThreadContext(hThread, &Context);
    Context.Rip = (DWORD64)lpBaseAddress + 2432;
    SetThreadContext(hThread, &Context);
    ::ResumeThread(hThread);
  }
  else
  {
    return (unsigned int)-1;
  }
  return v63;
}
```

**H√†nh vi ch√≠nh c·ªßa h√†m bao g·ªìm vi·ªác chu·∫©n b·ªã target process v√† resolve API (th√¥ng qua k·ªπ thu·∫≠t obfuscation + API hashing).**
- Gi·∫£i m√£ chu·ªói l·ªánh "C:\\Windows\\System32\\svchost.exe" b·∫±ng xor_DEADBEEF ‚Üí l∆∞u v√†o CommandLine.
- Gi·∫£i m√£ chu·ªói "kernel32" ‚Üí bƒÉm (hash) ‚Üí PEB_ldr(hash) duy·ªát PEB->Ldr ƒë·ªÉ l·∫•y base kernel32.
- L·∫ßn l∆∞·ª£t gi·∫£i m√£ t√™n API v√† l·∫•y ƒë·ªãa ch·ªâ qua export-table + h√†m bƒÉm:
```
CreateProcessA, VirtualAlloc(Ex), WriteProcessMemory, OpenThread,

GetThreadContext/SetThreadContext 

ResumeThread.
(T·∫•t c·∫£ t√™n API ƒë·ªÅu ƒëang b·ªã XOR-encode r·ªìi hash-lookup thay v√¨ d√πng IAT.)
```
- T·∫°o ti·∫øn tr√¨nh con ·ªü tr·∫°ng th√°i treo
- CreateProcessA(NULL, "‚Ä¶\\svchost.exe", ‚Ä¶, CREATE_SUSPENDED) ‚Üí nh·∫≠n ProcessInformation (PID/TID, handle process/thread).
- C·∫•p ph√°t & gi·∫£i m√£ payload r·ªìi nh√©t v√†o ti·∫øn tr√¨nh con
- VirtualAllocEx(process, ‚Ä¶, Size, MEM_COMMIT|RESERVE, PAGE_EXECUTE_READWRITE) ‚Üí lpBaseAddress.
- C·∫•p buffer t·∫°m (malloc), copy payload th√¥ t·ª´ byte_140030FB0 (k√≠ch th∆∞·ªõc Size).

**Gi·∫£i m√£ payload:**
- Gi·∫£i m√£ 8-byte key t·ª´ h·∫±ng 0xEFEAFD99BBFFE59D ‚Üí v6[8].
- G·ªçi xor((__int64)lpBuffer, Size, v6) ƒë·ªÉ XOR to√†n b·ªô payload b·∫±ng key 8B (l·∫∑p theo v√≤ng).
- WriteProcessMemory(process, lpBaseAddress, lpBuffer, Size, NULL) r·ªìi free.
- ƒê·ªïi entrypoint thread ƒë·ªÉ nh·∫£y v√†o payload
- L·∫•y TID c·ªßa ti·∫øn tr√¨nh con (sub_140001910(PID)), OpenThread(THREAD_ALL_ACCESS, ‚Ä¶, TID).
- GetThreadContext(hThread, &Context), s·ª≠a Context.Rip = lpBaseAddress + 2432 (offset 0x980),
r·ªìi SetThreadContext(hThread, &Context). (T·ª©c entrypoint c·ªßa thread s·∫Ω ‚Äúƒë√¢m‚Äù th·∫≥ng v√†o shellcode ƒë√£ vi·∫øt.)

**Ch·∫°y payload**
- ResumeThread(hThread) ‚Üí thread ti·∫øp t·ª•c th·ª±c thi t·ª´ RIP m·ªõi (payload).
- Tr·∫£ v·ªÅ v63 (bi·∫øn tr·∫°ng th√°i/garbage), th·∫•t b·∫°i th√¨ tr·∫£ -1.

>NOTE:
T·∫•t c·∫£ string/API name ƒë·ªÅu b·ªã che b·∫±ng XOR (xor_DEADBEEF) r·ªìi so kh·ªõp b·∫±ng h√†m bƒÉm hash().
PEB_parser/parser_returnAddrAPI l√† PEB->ldr + export-resolver t·ª´ PEB ƒë·ªÉ IAT.
Key **XOR 8 byte** d√πng ƒë·ªÉ gi·∫£i m√£ **payload** tr∆∞·ªõc khi **WriteProcessMemory**.
**Offset +2432** l√† entry b√™n trong kh·ªëi payload (tr√°nh nh·∫£y t·ª´ ƒë·∫ßu).
T√≥m l·∫°i: h√†m n√†y th·ª±c hi·ªán process injection ki·ªÉu create-remote-thread-hijack tr√™n svchost.exe b·ªã treo: gi·∫£i m√£ t√™n API v√† payload, ghi shellcode v√†o ti·∫øn tr√¨nh con, ch·ªânh RIP c·ªßa thread ch√≠nh ƒë·∫øn shellcode, r·ªìi resume ƒë·ªÉ ch·∫°y

T√≠nh to√°n key 
![image](https://hackmd.io/_uploads/BJfbA00sex.png)
T·ª´ ƒë√≥, ta t√≠nh ƒë∆∞·ª£c key gi·∫£i m√£ l√† **b"CHATGPT"**, d√πng ƒë·ªÉ dump v√† gi·∫£i m√£ shellcode.
![image](https://hackmd.io/_uploads/HyBN0CAjgx.png)
T√¥i n·∫°p ph·∫ßn shellcode v√†o BinaryNinja v√† thi·∫øt l·∫≠p base address l√† 0x1B000.
Khi th·ª±c thi, h√†m sub_140024100 ƒë·∫∑t con tr·ªè l·ªánh (RIP) ƒë·∫øn ƒë·ªãa ch·ªâ lpBaseAddress + 2432. V·ªõi c·∫•u h√¨nh base address = 0x1B000, ƒë·ªãa ch·ªâ n√†y tr·ªè ƒë·∫øn offset 0x1B980, ch√≠nh l√† v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa main code ƒë·ªÉ ph√¢n t√≠ch.
![image](https://hackmd.io/_uploads/HkXhkkkngg.png)

V·ªõi c√°c logic code quen thu·ªôc ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ·ªü file ban ƒë·∫ßu gi√∫p ta d·ªÖ d√†ng ph√¢n t√≠ch h∆°n v·∫´n s·ª≠ d·ª•ng l·∫°i c√°c h√†m nh∆∞ Xor_DEADBEEF v√† PEB_ldr, parser_returnAddrAPI
>Note: trong h√¨nh tr√™n t√¥i ƒë√£ rename l·∫°i t·∫•t c·∫£ bi·∫øn v·ªõi vi·ªác xor_deadbeef v·ªõi c√°c byteraw

ƒê·∫ßu ti√™n, shellcode load hai th∆∞ vi·ªán ws2_32.dll v√† kernel32.dll ƒë·ªÉ resolve c√°c API c·∫ßn thi·∫øt.
M·ªü socket v·ªõi c√°c API nh∆∞ (WSASTARTUP, socket, inet_addr, htons, bind, listen, recv, send)
![image](https://hackmd.io/_uploads/SJZwW1khll.png)
Ti·∫øp theo, shellcode load msvcrt.dll, t·∫°o key RC4 th√¥ng qua sub_1b520, v√† d√πng n√≥ ƒë·ªÉ gi·∫£i m√£ payload ƒë√£ ƒë∆∞·ª£c hardcode.
![image](https://hackmd.io/_uploads/HkF1fJJhll.png)

**T√≥m t·∫Øt l·∫°i ti·∫øn tr√¨nh con svchost.exe:**
- Resolve DLL/API b·∫±ng PEB + t√™n b·ªã XOR
- Gi·∫£i m√£ (Xor_DEADBEEF) c√°c chu·ªói: "kernel32", "WS2_32.dll", r·ªìi bƒÉm (hash) v√† tra qua PEB_ldr(...) + parser_returnAddrAPI(...) ƒë·ªÉ l·∫•y ƒë·ªãa ch·ªâ c√°c API m·∫°ng:
**WSAStartup, socket, setsockopt, inet_addr, htons, bind, listen, accept, recv, send, closesocket, WSACleanup.**
- ƒê√¢y l√† k·ªπ thu·∫≠t n√© IAT (API hashing + PEB walker).
- Kh·ªüi t·∫°o Winsock + t·∫°o socket bound v·ªÅ localhost
- **WSAStartup()**; t·∫°o SOCKET qua socket().
- C√≥ g·ªçi setsockopt() v·ªõi optlen=4 (bi·∫øn output = 4) ‚Äî kh·∫£ nƒÉng ƒë·∫∑t timeout/SO_RCVTIMEO ho·∫∑c reuse addr (kh√¥ng th·∫•y c·ª• th·ªÉ option id trong snippet, nh∆∞ng pattern gi·ªëng setsockopt(s, SOL_SOCKET, X, &val, 4)).
- D√πng inet_addr("127.0.0.1") v√† htons(...) ƒë·ªÉ ƒëi·ªÅn sockaddr_in (family = AF_INET = 2, IP loopback).

L·∫Øng nghe v√† nh·∫≠n k·∫øt n·ªëi
- **bind()** r·ªìi listen(); n·∫øu c·∫£ hai ƒë·ªÅu OK (kh√°c 0xFFFFFFFF), n√≥ l·∫∑p accept() cho ƒë·∫øn khi nh·∫≠n ƒë∆∞·ª£c socket h·ª£p l·ªá (kh√°c INVALID_SOCKET).
Nh·∫≠n d·ªØ li·ªáu v√† x·ª≠ l√Ω ‚Äúg√≥i‚Äù RC4
- **recv()** v√†o buffer 0x400. N·∫øu nh·∫≠n > 0, N√≥ t·ª´ ti·∫øn tr√¨nh cha ƒë√£ m·ªü socket v√† g·ª≠i qua c·ªïng 1337:
- Gi·∫£i m√£ t√™n "msvcrt.dll" v√† h√†m "strcpy" 
- C√≥ m·ªôt ‚Äúinput blob‚Äù 0x1E bytes (3 qword + 1 word): 

G·ªçi **sub_1b520("546423423634")** ƒë·ªÉ t·∫°o key RC4:
- H√†m ƒë√≥ gi·∫£i m√£ t√™n "kernel32", "msvcrt.dll", "LoadLibrary", "sscanf_s" r·ªìi d√πng sscanf_s/parser ƒë·ªÉ bi·∫øn chu·ªói hexa "546423423634" th√†nh d√£y byte, tr·∫£ v·ªÅ ƒë·ªô d√†i/2 (n·∫øu s·ªë k√Ω t·ª± hex ch·∫µn) ho·∫∑c -1 n·∫øu l·∫ª. ‚Üí K·∫øt lu·∫≠n: key RC4 = bytes c·ªßa chu·ªói hex "54 64 23 42 36 34".
- G·ªçi RC4_decryption(key, keyLen, input, input_len, output) ƒë·ªÉ gi·∫£i m√£ blob n√≥i tr√™n v√†o buffer output (ƒë√£ zero).
- Sau ƒë√≥ shellcode s·∫Ω l·∫•y d·ªØ li·ªáu ƒë∆∞·ª£c nh·∫≠n v√† so s√°nh v·ªõi output decryption v√† tr·∫£ k·∫øt qu·∫£ ‚ÄòWrong‚Äô ho·∫∑c ‚ÄòTrue'.
- Sau ƒë√≥ n√≥ s·∫Ω g·ª≠i l·∫°i Ti·∫øn tr√¨nh cha l√† "Wrong" hay "True"
**-> Hardcode buffer sau khi decryption RC4 l√† flag d√πng ƒë·ªÉ ki·ªÉm tra input t·ª´ ti·∫øn tr√¨nh cha.**
## Decryption blob (0x1e)
![code](https://hackmd.io/_uploads/Sko87J1ngl.png)
```
Output:
Cipher (hex): 7a5c600ca5d7e7480316ed0e5bb2d9bf01eec9bdbcc1b94c0dc67fb3a1eb
Key (hex)   : 546423423634  / ASCII: Td#B64
Plain (hex) : 505449544354467b346e74695f636834745f6750745f5072305f6b6b6b7d
Plain (ascii): PTITCTF{4nti_ch4t_gPt_Pr0_kkk}
```
![image](https://hackmd.io/_uploads/rkfyTQW3xl.png)

**T√≥m t·∫Øt to√†n b·ªô ch∆∞∆°ng tr√¨nh:**
- Ti·∫øn tr√¨nh cha kh·ªüi t·∫°o ti·∫øn tr√¨nh con svchost.exe (ch·ª©a logic check flag input)
- M·ªü connection 127.0.0.1:1337 ƒë·ªÉ ti·∫øn tr√¨nh cha v√† ti·∫øn tr√¨nh con giao ti·∫øp v·ªõi nhau g·ª≠i input v√† tr·∫£ k·∫øt qu·∫£
**-> FLAG: PTITCTF{4nti_ch4t_gPt_Pr0_kkk}**
