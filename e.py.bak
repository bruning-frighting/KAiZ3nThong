#!/usr/bin/env python3
"""
fix_image_links.py

Recursively scan markdown files under src/content/posts (default) and replace
all occurrences of:

    ![image](/images/whatever.png)

with

    ![!image](../../../public/image/whatever.png)

The script makes a backup (.bak) before modifying each file. It supports
--path to change the root folder and --dry-run to preview changes.

WARNING: The replacement follows the exact pattern asked by the user: it
replaces the leading `/images/` with `../../../public/image/` and also
wraps the alt text to `!image` -> `!(!image)` as requested.

Usage:
    python fix_image_links.py            # dry-run (default)
    python fix_image_links.py --apply    # actually modify files
    python fix_image_links.py --path src/content/posts --apply

"""
import argparse
from pathlib import Path
import re
import shutil

# Regex to match: ![image](/images/any/path/here.ext)
# Capture the path after /images/
PATTERN = re.compile(r"!\[image\]\(/images/([^)"]+)\)")
REPLACEMENT = r"![!image](../../../public/images/\1)"


def process_file(path: Path, apply: bool) -> int:
    """Process a single markdown file. Return number of replacements."""
    text = path.read_text(encoding="utf-8")
    new_text, n = PATTERN.subn(REPLACEMENT, text)
    if n > 0:
        if apply:
            # Backup original
            bak = path.with_suffix(path.suffix + ".bak")
            shutil.copy2(path, bak)
            path.write_text(new_text, encoding="utf-8")
        else:
            # dry-run: do nothing
            pass
    return n


def walk_and_fix(root: Path, apply: bool) -> dict:
    stats = {}
    for p in root.rglob("*.md"):
        try:
            n = process_file(p, apply)
            if n:
                stats[str(p)] = n
        except Exception as e:
            print(f"[!] Error processing {p}: {e}")
    return stats


if __name__ == "__main__":
    ap = argparse.ArgumentParser(description="Fix image links in markdown files")
    ap.add_argument("--path", "-p", default="src/content/posts", help="root folder to scan")
    ap.add_argument("--apply", "-a", action="store_true", help="apply changes (default: dry-run)")
    args = ap.parse_args()

    root = Path(args.path)
    if not root.exists():
        print(f"[!] Path does not exist: {root}")
        raise SystemExit(1)

    print(f"Scanning markdown files under: {root}")
    print("Mode:", "APPLY" if args.apply else "DRY-RUN (no files will be changed)")

    stats = walk_and_fix(root, args.apply)
    if not stats:
        print("No matches found.")
    else:
        total = sum(stats.values())
        print(f"Found {total} replacements in {len(stats)} file(s):")
        for f, n in stats.items():
            print(f" - {f}: {n} occurrence(s)")
        if not args.apply:
            print("Run with --apply to modify files (backups created with .bak suffix)")
        else:
            print("Changes applied. Backups saved with .bak extension.")
